---
title: "Tech Or Treat: The Sentimental Stock Saga"
subtitle: "INFO 523 - Fall 2023 - Project Final"
author: "Team Feature Finders Club - Eshaan Mathakari,
         Sanjay Bhargav Siddi, 
         Likith Kumar Dundigalla,
         Aravind shrenivas Murali,
         Vamsi Vadala"
title-slide-attributes:
  data-background-image: images/watercolour_sys02_img34_teacup-ocean.jpg
  data-background-size: stretch
  data-background-opacity: "0.7"
  data-slide-number: none
format:
  revealjs:
    theme:  ['data/customtheming.scss']
  
editor: visual
execute:
  echo: false
jupyter: python3
---

## Objective

-   Analyze sentiment in news headlines about Apple Inc. stock to assess public perception.

-   Explore correlation between sentiment analysis results and Apple's stock performance for investor insights.

## Question

How does sentiment analysis of news headlines provide insights into Apple Inc.'s stock price movements, revealing the influence of external factors on its market performance?\
\
What valuable insights can be derived from correlating sentiment analysis of news headlines with Apple's stock behavior, elucidating the impact of external factors on the broader market context?

## Motivation

-   Uncover potential correlations between public perception, external factors on Apple Inc.'s stock performance

-   Understanding how sentiment influences market movements

## Sample Data

### Apple Inc. Stock Price Data

```{python setup, message=FALSE,echo=FALSE,results='hide'}
#| label: install-pkgs
#| include: false
'''
#Remove the library installing commands from comment 
!pip install yfinance
!pip install vaderSentiment
!pip install pandas 
!pip install matplotlib
!pip install plotly

!pip install wordcloud
'''
```

```{python importing-lib, message=FALSE,echo=FALSE,results='hide'}
#| label: load-pkgs
# Imports essential libraries for data manipulation, visualization, sentiment analysis, and financial data retrieval using Yahoo Finance.
import warnings
warnings.filterwarnings("ignore")
from dateutil import parser
import requests
import pandas as pd
import matplotlib.pyplot as plt
import yfinance 
import seaborn as sns
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from wordcloud import WordCloud
```

```{python stockdata_extraction,echo=FALSE,results='hide'}
#| label: stockdata_extraction
# Create a Ticker object for the stock with symbol 'AAPL' (Apple Inc.)
apple=yfinance.Ticker("AAPL")
# Retrieve historical stock data for the last month for the specified ticker
apple_data=apple.history(period='1mo')
#Restting date from index to column and converting it to '%Y-%m-%d' format
apple_data.reset_index(inplace=True)
apple_data['Date'] = apple_data['Date'].dt.strftime('%Y-%m-%d')
apple_data.head(3)
```

## 

```{python headlines_extraction,echo=FALSE,results='hide'}
#| label: headlines_extraction
# Setting up necessary parameters for the API request
api_key='9dcab5d0d86940459623ec7dea5c8d36'
stock_symbol ="AAPL"
# Setting up date range for fetching news data (last 30 days)
end_date = datetime.now()
start_date = end_date - timedelta(days=29)

# Formatting dates for the API request
from_date = start_date.strftime("%Y-%m-%d")
to_date = end_date.strftime("%Y-%m-%d")

# Constructing the final URL for fetching news within the date range
news_url = f"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en"

# Making a request to the API with the specified date range
response = requests.get(news_url)

# Checking if the API request was successful (status code 200)
if response.status_code == 200:
    # Parsing the JSON response to retrieve news articles
    news_data = response.json()
    articles = news_data['articles']
    # Extracting headlines and publication dates from articles
    headlines = [(article['title'], article['publishedAt']) for article in articles]
else:
  # Displaying an error message if the API request fails
    print("Failed to retrieve news data.")
```

### Apple Inc. News Headlines Data

\

```{python headlines_transformation, message=FALSE,echo=FALSE,results='hide'}
#| label: headlines_transformation

# Initialize an empty list to store Apple-related headlines with their respective dates
apple_related_headlines=[]
# Iterate through headlines and their associated publication dates
for headline, _ in headlines:
    try:
        # Attempt to parse the date using a parser (assuming it's in a valid format)
        date = parser.parse(_)
        # Check if the headline contains the keyword 'Apple'
        if 'Apple' in headline:
            # If it does, append the headline and its date to the list
            apple_related_headlines.append((headline, date))
    except ValueError:
        # Ignore and continue if there's an issue parsing the date
        pass

# Sort the list of Apple-related headlines by date
apple_related_headlines.sort(key=lambda x: x[1])

    
# Create a DataFrame from the list of Apple-related headlines with dates
df_apple_related_headlines = pd.DataFrame(apple_related_headlines, columns= ['Headlines', 'date'])

# Remove duplicate headlines to retain unique entries
df_unique_apple_related_headlines = df_apple_related_headlines.drop_duplicates(subset=['Headlines'])

df_unique_apple_related_headlines.head(3)
```

## Analysis

## Workflow

1.  Package Integration

2.  Data Acquisition

3.  Data Refinement

4.  Sentiment Analysis

5.  Plotted results and Interpretation.

```{python wordcloud,echo=FALSE,results='hide'}
#| label: wordcloud
text = ' '.join(df_unique_apple_related_headlines['Headlines'])

# Generate the word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)

# Display the word cloud using matplotlib
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Headlines')
plt.show()
```

```{python sentimentAnalysis,echo=FALSE,results='hide'}
#| label: sentimentAnalysis
#| include: false
# Initialize the SentimentIntensityAnalyzer
analyzer = SentimentIntensityAnalyzer()
# Initialize lists to store sentiment scores for each headline
sentiments = [] # Stores headlines
neg_scores = [] # Stores negative sentiment scores
neu_scores = [] # Stores neutral sentiment scores
pos_scores = [] # Stores positive sentiment scores
compound_scores = [] # Stores compound sentiment scores

# Iterate through each headline in the DataFrame to analyze sentiment
for sentence in df_unique_apple_related_headlines['Headlines']:
    # Perform sentiment analysis on each headline using the analyzer
    vs = analyzer.polarity_scores(sentence)
    # Append headline, negative, neutral, positive, and compound scores to respective lists
    sentiments.append(sentence)
    neg_scores.append(vs['neg'])
    neu_scores.append(vs['neu'])
    pos_scores.append(vs['pos'])
    compound_scores.append(vs['compound'])
```

```{python sentimentScore,echo=FALSE,results='hide'}
#| label: sentimentScore
#| include: false
# Create a DataFrame to store sentiment scores of the headlines
sentiment_df = pd.DataFrame({
    'Headlines': sentiments,
    'Negative Score': neg_scores,
    'Neutral Score': neu_scores,
    'Positive Score': pos_scores,
    'Compound Score': compound_scores
})
```

```{python transformations,echo=FALSE,results='hide'}
#| label: transformations
#| include: false
# Merge the unique Apple-related headlines DataFrame and the sentiment scores DataFrame
merged_df= pd.merge(df_unique_apple_related_headlines, sentiment_df, how="inner", on=["Headlines"])
# Convert the 'date' column to required format
merged_df['date'] = merged_df['date'].dt.strftime('%Y-%m-%d')
```

```{python plot,echo=FALSE,results='hide'}
#| label: AAPL Stock Price and Sentiment Analysis
# Creating traces for the subplots
trace1 = go.Scatter(x=apple_data['Date'], y=apple_data['Close'], mode='lines', name='AAPL Close Price')
trace2 = go.Scatter(x=merged_df['date'], y=merged_df['Compound Score'], mode='lines', name='Sentiment Score', line=dict(color='orange'))

# Creating subplot figure
fig = make_subplots(rows=2, cols=1, subplot_titles=('AAPL Stock Price', 'Sentiment Analysis of News Headlines'))

# Adding traces to subplots
fig.add_trace(trace1, row=1, col=1)
fig.add_trace(trace2, row=2, col=1)

# Updating layout
fig.update_layout(height=600, width=800, title_text="AAPL Stock Price and Sentiment Analysis")

# Updating x-axis and y-axis labels
fig.update_xaxes(title_text="Date", row=2, col=1)
fig.update_yaxes(title_text="Price", row=1, col=1)
fig.update_yaxes(title_text="Sentiment Score", row=2, col=1)

# Displaying the interactive subplot
fig.show()
```

```{python correlation calculation,echo=FALSE,results='hide'}
#| label: correlation
# Stock symbols to analyze (add more symbols as needed)
stock_symbols = ["LNVGY", "DELL", "HPE", "MSFT", "SSNLF"]
api_key = '9dcab5d0d86940459623ec7dea5c8d36'
all_headlines = []

# Set the date range for news retrieval
end_date = datetime.now()
start_date = end_date - timedelta(days=20)
from_date = start_date.strftime("%Y-%m-%d")
to_date = end_date.strftime("%Y-%m-%d")

# Retrieve news data for each stock symbol
for stock_symbol in stock_symbols:
    query_params = {
        'q': f'{stock_symbol}',
        'apiKey': api_key,
        'language': 'en',
        'country': 'us',
    }

    news_url = f"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en"
    response = requests.get(news_url)

    if response.status_code == 200:
        news_data = response.json()
        articles = news_data['articles']
        headlines = [(article['title'], article['publishedAt']) for article in articles]
        all_headlines.extend(headlines)
    else:
        print(f"Failed to retrieve news data for {stock_symbol}.")

# Filter headlines containing the company name
company_related_headlines = []

for headline, _ in all_headlines:
    try:
        date = parser.parse(_)
        for stock_symbol in stock_symbols:
            if stock_symbol in headline:
                company_related_headlines.append((headline, date, stock_symbol))
    except ValueError:
        pass

# Sort headlines by date
company_related_headlines.sort(key=lambda x: x[1])

# Display company-related headlines
for data in company_related_headlines:
    print(f'Headline: {data[0]}\nDate: {data[1]}\nSymbol: {data[2]}\n')

# Sentiment analysis using NLTK's VADER
analyzer = SentimentIntensityAnalyzer()
sentiments = []
neg_scores = []
neu_scores = []
pos_scores = []
compound_scores = []

# Analyze sentiment for each headline
for sentence in company_related_headlines:
    vs = analyzer.polarity_scores(sentence[0])
    sentiments.append(sentence[0])
    neg_scores.append(vs['neg'])
    neu_scores.append(vs['neu'])
    pos_scores.append(vs['pos'])
    compound_scores.append(vs['compound'])

# Create a DataFrame for sentiment scores
company_sentiment_df = pd.DataFrame({
    'Headlines': sentiments,
    'Negative Score': neg_scores,
    'Neutral Score': neu_scores,
    'Positive Score': pos_scores,
    'Compound Score': compound_scores
})

# Merge sentiment data with company-related headlines
company_merged_df = pd.merge(pd.DataFrame(company_related_headlines, columns=['Headlines', 'date', 'Symbol']),
                             company_sentiment_df, how="inner", on=["Headlines"])

# Format date columns
company_merged_df['date'] = company_merged_df['date'].dt.strftime('%Y-%m-%d')
company_merged_df['date'] = pd.to_datetime(company_merged_df['date'])

# Group sentiment scores by date
grouped_df = company_merged_df.groupby('date')['Compound Score'].mean().reset_index()

# Display grouped sentiment scores
print(grouped_df)

# Retrieve Apple stock data using Yahoo Finance API
apple = yf.Ticker("AAPL")
apple_data = apple.history(period='1mo')

# Format date columns for merging
apple_data['date'] = apple_data.index.to_series().dt.strftime('%Y-%m-%d')
grouped_df['date'] = pd.to_datetime(grouped_df['date'])
apple_data['date'] = pd.to_datetime(apple_data['date'])

# Merge sentiment scores with Apple stock data
full_merged_data = pd.merge(grouped_df, apple_data, how='inner', left_on='date', right_on='date')

# Calculate correlation between 'Compound Score' and 'Close'
correlation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])
print(f"Correlation between Compound Score and Closing Price: {correlation}")

print(full_merged_data)

# Plotting
# Calculate correlation between 'Compound Score' and 'Close'
reversed_correlation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])
print(f"Correlation between Compound Score and Closing Price: {reversed_correlation}")

# Create subplots with two y-axes
fig = make_subplots(specs=[[{"secondary_y": True}]])
fig.update_layout(
    title='Competitors Sentiment Scores vs. Apple Closing Price',
    xaxis_title='Date',
    plot_bgcolor='white',  # Set plot background color
    paper_bgcolor='white',  # Set paper background color
)

# Identify increases and decreases in Closing Price
positive_changes = full_merged_data['Close'].diff().gt(0)
negative_changes = full_merged_data['Close'].diff().lt(0)

# Add traces for the Reversed Compound Score, Closing Price, and changes
fig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Compound Score'],
                         mode='lines+markers', name='Compound Score'), secondary_y=False)
fig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Close'],
                         mode='lines+markers', name='Closing Price', line=dict(color='darkgoldenrod')), secondary_y=True)
fig.add_trace(go.Scatter(x=full_merged_data['date'][positive_changes], y=full_merged_data['Close'][positive_changes],
                         mode='markers', name='Positive Change', marker=dict(color='green', size=8)),
              secondary_y=True)
fig.add_trace(go.Scatter(x=full_merged_data['date'][negative_changes], y=full_merged_data['Close'][negative_changes],
                         mode='markers', name='Negative Change', marker=dict(color='red', size=8)),
              secondary_y=True)

# Update y-axis labels and styles
fig.update_yaxes(title_text='Compound Score', secondary_y=False, color='blue', showline=True, linecolor='blue', linewidth=2)
fig.update_yaxes(title_text='Closing Price', secondary_y=True, color='darkgoldenrod', showline=True, linecolor='darkgoldenrod', linewidth=2)
fig.update_xaxes(showgrid=True, zeroline=True, gridcolor='lightgrey', gridwidth=0.5, showline=True, linecolor='#2a3f5f', linewidth=2)  # Show minimal gridlines

# Display the plot
fig.show()
```

```{python Global factors vs Apple closing price correlation}
#| label: Global factors vs Apple closing price correlation
# Global factors vs Apple stock
import seaborn as sns

# Stock symbols to analyze (add more symbols as needed)
stock_symbols = ["pandemic", "tornado", "hurricane", "Pandemic", "economic crisis","earthquake","Global recession", "currency"]
api_key = 'ef5a0ad43b08420bb13b761a3a1239fa'
all_headlines = []

# Set the date range for news retrieval
end_date = datetime.now()
start_date = end_date - timedelta(days=20)
from_date = start_date.strftime("%Y-%m-%d")
to_date = end_date.strftime("%Y-%m-%d")

# Retrieve news data for each stock symbol
for stock_symbol in stock_symbols:
    query_params = {
        'q': f'{stock_symbol}',
        'apiKey': api_key,
        'language': 'en',
        'country': 'us',
    }

    news_url = f"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en"
    response = requests.get(news_url)

    if response.status_code == 200:
        news_data = response.json()
        articles = news_data['articles']
        headlines = [(article['title'], article['publishedAt']) for article in articles]
        all_headlines.extend(headlines)
    else:
        print(f"Failed to retrieve news data for {stock_symbol}.")

# Filter headlines containing the company name
company_related_headlines = []

for headline, _ in all_headlines:
    try:
        date = parser.parse(_)
        for stock_symbol in stock_symbols:
            if stock_symbol in headline:
                company_related_headlines.append((headline, date, stock_symbol))
    except ValueError:
        pass

# Sort headlines by date
company_related_headlines.sort(key=lambda x: x[1])

# Display company-related headlines
for data in company_related_headlines:
    print(f'Headline: {data[0]}\nDate: {data[1]}\nSymbol: {data[2]}\n')

# Sentiment analysis using NLTK's VADER
analyzer = SentimentIntensityAnalyzer()
sentiments = []
neg_scores = []
neu_scores = []
pos_scores = []
compound_scores = []

# Analyze sentiment for each headline
for sentence in company_related_headlines:
    vs = analyzer.polarity_scores(sentence[0])
    sentiments.append(sentence[0])
    neg_scores.append(vs['neg'])
    neu_scores.append(vs['neu'])
    pos_scores.append(vs['pos'])
    compound_scores.append(vs['compound'])

# Create a DataFrame for sentiment scores
company_sentiment_df = pd.DataFrame({
    'Headlines': sentiments,
    'Negative Score': neg_scores,
    'Neutral Score': neu_scores,
    'Positive Score': pos_scores,
    'Compound Score': compound_scores
})

# Merge sentiment data with company-related headlines
company_merged_df = pd.merge(pd.DataFrame(company_related_headlines, columns=['Headlines', 'date', 'Symbol']),
                             company_sentiment_df, how="inner", on=["Headlines"])

# Format date columns
company_merged_df['date'] = company_merged_df['date'].dt.strftime('%Y-%m-%d')
company_merged_df['date'] = pd.to_datetime(company_merged_df['date'])

# Group sentiment scores by date
grouped_df = company_merged_df.groupby('date')['Compound Score'].mean().reset_index()

# Display grouped sentiment scores
print(grouped_df)

# Retrieve Apple stock data using Yahoo Finance API
apple = yfinance.Ticker("AAPL")
apple_data = apple.history(period='1mo')

# Format date columns for merging
apple_data['date'] = apple_data.index.to_series().dt.strftime('%Y-%m-%d')
grouped_df['date'] = pd.to_datetime(grouped_df['date'])
apple_data['date'] = pd.to_datetime(apple_data['date'])

# Merge sentiment scores with Apple stock data
full_merged_data = pd.merge(grouped_df, apple_data, how='inner', left_on='date', right_on='date')

# Calculate correlation between 'Compound Score' and 'Close'
correlation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])
print(f"Correlation between Compound Score and Closing Price: {correlation}")

print(full_merged_data)
# Plotting
 

# Reverse the interpretation of sentiment scores
full_merged_data['Reversed Compound Score'] = -full_merged_data['Compound Score']

# Calculate correlation between 'Reversed Compound Score' and 'Close'
reversed_correlation = full_merged_data['Reversed Compound Score'].corr(full_merged_data['Close'])
print(f"Correlation between Compound Score and Closing Price: {reversed_correlation}")

# Create subplots with two y-axes
fig = make_subplots(specs=[[{"secondary_y": True}]])
fig.update_layout(
    title='Global Factors Sentiment Scores vs. Apple Closing Price',
    xaxis_title='Date',
    plot_bgcolor='white',  # Set plot background color
    paper_bgcolor='white',  # Set paper background color
)

# Identify increases and decreases in Closing Price
positive_changes = full_merged_data['Close'].diff().gt(0)
negative_changes = full_merged_data['Close'].diff().lt(0)

# Add traces for the Reversed Compound Score, Closing Price, and changes
fig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Reversed Compound Score'],
                         mode='lines+markers', name='Compound Score'), secondary_y=False)
fig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Close'],
                         mode='lines+markers', name='Closing Price', line=dict(color='darkgoldenrod')), secondary_y=True)
fig.add_trace(go.Scatter(x=full_merged_data['date'][positive_changes], y=full_merged_data['Close'][positive_changes],
                         mode='markers', name='Positive Change', marker=dict(color='green', size=8)),
              secondary_y=True)
fig.add_trace(go.Scatter(x=full_merged_data['date'][negative_changes], y=full_merged_data['Close'][negative_changes],
                         mode='markers', name='Negative Change', marker=dict(color='red', size=8)),
              secondary_y=True)

# Update y-axis labels and styles
fig.update_yaxes(title_text='Compound Score', secondary_y=False, color='blue', showline=True, linecolor='blue', linewidth=2)
fig.update_yaxes(title_text='Closing Price', secondary_y=True, color='darkgoldenrod', showline=True, linecolor='darkgoldenrod', linewidth=2)
fig.update_xaxes(showgrid=True, zeroline=True, gridcolor='lightgrey', gridwidth=0.5, showline=True, linecolor='#2a3f5f', linewidth=2)  # Show minimal gridlines

# Display the plot
fig.show() 
```

## Conclusion

::: incremental
-   Acquired data from yfinance and headlines from NewAPI.

-   Explored intersection of finance and sentiment analysis focused on Apple stock using vaderSentiment in Python.

-   Plotted sentiment scores against Apple's stock price, visually highlighting the potential correlations between sentiments shifts and market trends.
:::

## Challenges faced

::: incremental
[- One of the limitation to this project was fetching data from a live data source. We used newsapi.org to fetch realtime news but this platform only lets us fetch data for the past 29 days which would stop us from training the model on a wider timescale.]{style="font-size:23px;"}

[- For the past few months, market sentiment has stayed overtly positive which doesn't help us in training the model well to fit in the Bear Market Scenario.]{style="font-size:23px;"}

[- Stock Market Analysis is a wide spectrum and all Investments should be done with caution. This is just a educational project to show the correlation between market sentiment and the stock price. Other factors such as Dollar Index, Overall Investor sentiments, external factors such as trading restrictions on products around the globe and the undergoing wars between different nations. DO NOT take the outcome of this project as financial advice. Please be careful before making any investments.]{style="font-size:23px;"}

[- Thank you for joining me on this exploration of sentiments in the world of Apple stocks.]{style="font-size:23px;"}
:::
