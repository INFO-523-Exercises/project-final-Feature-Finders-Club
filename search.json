[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "",
    "text": "# GETTING THE LIBRARIES\nif (!require(pacman))\n  install.packages(pacman)\n\npacman::p_load(tidyverse,\n               formattable,\n               janitor,\n               dlookr,\n               here)"
  },
  {
    "objectID": "proposal.html#high-level-goal",
    "href": "proposal.html#high-level-goal",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "High-level goal",
    "text": "High-level goal\nSentiment analysis of diverse data sources to predict Apple Inc. stock price movement."
  },
  {
    "objectID": "proposal.html#abstract",
    "href": "proposal.html#abstract",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Abstract",
    "text": "Abstract\nOur aim is to conduct sentiment analysis on Apple Inc. stock by analysing diverse sources, including media coverage, industry reports, social media reviews, and investor opinions from news headlines. By leveraging sentiment analysis techniques, our project intends to uncover patterns in sentiment that may correlate with stock price movements. The insights gained could provide valuable perspectives on how public perception influences Apple’s stock performance, offering potential benefits for investors and analysts.\nDataset\n\n# importing module to download data\nimport yfinance\n\n# Using Ticker module in yfinace to get data of desired stock\napple = yfinance.Ticker(\"AAPL\")\n# usign history function to get stock data of yesterday with 1 hour interval from maket opening to closing\ndata = apple.history(period='1d',interval='1h')\n\nThe data is retrived from \\(Yahoo^\\textregistered!\\ Finance\\) in real-time. This data contain’s the information about a particular stock and how it performed during certain period. This information includes openning,closing and other related features of the stock. The following are the attributes(freatures) of the data retrived:\n\nData Dictionary\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\n\n\nDatetime\nString\nThis column represents the date and time for each data point, in the format “YYYY-MM-DD HH:MM:SS-TZ.” It provides the timestamp at which the stock price information was recorded. The timezone (TZ) indicates the time zone for the recorded data.\n\n\nOpen\nInteger\nThis column contains the opening price of the stock at the specific timestamp. The opening price is the price at which the stock started trading at the beginning of the given time interval (e.g., each hour).\n\n\nHigh\nInteger\nThe “High” column contains the highest price reached by the stock during the time interval. It represents the peak value of the stock’s price within that hour.\n\n\nLow\nInteger\nIn this column, you find the lowest price reached by the stock during the same time interval. It represents the minimum value of the stock’s price within that hour.\n\n\nClose\nInteger\nThe “Close” column provides the closing price of the stock at the end of the specified time interval. It is the last price recorded before the end of that hour.\n\n\nVolume\nInteger\nThis column represents the trading volume of the stock during the given time interval. Trading volume is the total number of shares or contracts traded during that hour.\n\n\nDividends\nInteger\nThe “Dividends” column typically contains information about any dividend payments made during the specified time interval. In the dataset you provided, it appears that no dividends were recorded (values are zero).\n\n\nStock Splits\nInteger\nThe “Stock Splits” column would typically record any information related to stock splits that occurred during the specified time interval. In the dataset, it also appears that no stock splits were recorded (values are zero).\n\n\n\n\ndata\n\n\n\n\n\n\n\nOpen\nHigh\nLow\nClose\nVolume\nDividends\nStock Splits\n\n\nDatetime\n\n\n\n\n\n\n\n\n\n\n\n2023-11-07 09:30:00-05:00\n179.179993\n180.820007\n179.009995\n180.710007\n16268674\n0.0\n0.0\n\n\n2023-11-07 10:30:00-05:00\n180.695007\n181.595001\n180.529999\n181.455002\n8190077\n0.0\n0.0\n\n\n2023-11-07 11:30:00-05:00\n181.455002\n181.639999\n180.520004\n181.175003\n7493420\n0.0\n0.0\n\n\n2023-11-07 12:30:00-05:00\n181.175003\n182.160004\n180.934998\n182.014999\n6208182\n0.0\n0.0\n\n\n2023-11-07 13:30:00-05:00\n182.018494\n182.440002\n181.929993\n182.340897\n5219872\n0.0\n0.0\n\n\n2023-11-07 14:30:00-05:00\n182.350006\n182.429993\n181.899994\n182.198303\n5513486\n0.0\n0.0\n\n\n2023-11-07 15:30:00-05:00\n182.195007\n182.339996\n181.550003\n181.820007\n8142789\n0.0\n0.0"
  },
  {
    "objectID": "proposal.html#headlines-dataset",
    "href": "proposal.html#headlines-dataset",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Headlines Dataset",
    "text": "Headlines Dataset\n\nimport requests\nimport pandas as pd\nfrom dateutil import parser\nfrom datetime import datetime, timedelta\n\napi_key='9dcab5d0d86940459623ec7dea5c8d36'\nstock_symbol =\"AAPL\"\nquery_params = {\n    'q': f'{stock_symbol}',\n    'apiKey': api_key,\n    'language': 'en',  # English language\n    'country': 'us',   # USA sources\n}\n\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=7)\n\nfrom_date = start_date.strftime(\"%Y-%m-%d\")\nto_date = end_date.strftime(\"%Y-%m-%d\")\n\nnews_url = f\"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en\"\n\nresponse = requests.get(news_url)\n\nif response.status_code == 200:\n    news_data = response.json()\n    articles = news_data['articles']\n    headlines = [(article['title'], article['publishedAt']) for article in articles]\nelse:\n    print(\"Failed to retrieve news data.\")\n\napple_related_headlines=[]\nfor headline, _ in headlines:\n    try:\n        date = parser.parse(_)\n        if 'Apple' in headline:\n            apple_related_headlines.append((headline, date))\n    except ValueError:\n        pass\n\napple_related_headlines.sort(key = lambda x: x[1])\nnews_dataframe=pd.DataFrame(apple_related_headlines, columns=['Headline', 'Date'])\nnews_dataframe.head()\n\n\n\n\n\n\n\n\n\nHeadline\nDate\n\n\n\n\n0\nSwitchBot for iOSがApple Watchのコンプリケーションに対応。\n2023-11-06 05:24:22+00:00\n\n\n1\nApple's New Feature Detects Water In USB-C Por...\n2023-11-06 08:20:06+00:00\n\n\n2\nCharlie Munger's Apple Confidence, Raskin Take...\n2023-11-06 10:26:19+00:00\n\n\n3\nApple iPhone-maker Foxconn sees solid holiday ...\n2023-11-06 12:16:18+00:00\n\n\n4\nApple MacBook Pro 14-inch review: Huge amounts...\n2023-11-06 17:14:11+00:00\n\n\n\n\n\n\n\n\n\n\nData Dictionary\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\n\n\nHeadLine\nString\nA text field containing headlines related to Apple, ranging from news updates to reviews and opinions.\n\n\nDate\nString\nA datetime field representing the date and time when the headline was published or reported. The timestamps are in Coordinated Universal Time (UTC).\n\n\n\n\nWhy did we choose this data?\nThis dataset is suitable for analyzing the stock price movement due to its time series format with open, high, low, and close prices, as well as volume, dividends, and stock splits. The high-frequency data, recorded at hourly intervals, is valuable for short-term trading. These features provide essential data for analysis and modeling of the stock price movement.\n\n\nVariables Involved:\n\nNews Headlines: Collecting a dataset of news headlines relevant to the stock market. These headlines will serve as a variable to assess the impact on stock prices.\nStock Prices: Gathering historical stock price data for a selected set of stocks within a particular sector. These will be the stocks to study for correlations.\nSector Information: Identifying and categorizing stocks into their respective sectors for sector specific analysis.\n\n\n\nVariables to be Created:\n\nCorrelation Coefficients: Calculating the correlation coefficients to quantify the relationships between Apple’s stock price movements and news headlines, and between stocks within the same sector.\nMarket Sentiment Index: Creating a sentiment index based on the tone of the news headlines (positive, negative, or neutral sentiment) to gauge how news sentiment affects Apple’s stock prices."
  },
  {
    "objectID": "proposal.html#question",
    "href": "proposal.html#question",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Question",
    "text": "Question\nHow can sentiment analysis of news headlines contribute to understanding the stock price movements of Apple Inc., and what insights can be gained regarding the interconnectedness of external factors and their impact on Apple’s stock performance in the broader market context?\n\nMotivation:\nThe question sparks curiosity about how news headlines might affect Apple’s stock prices. By delving into sentiment analysis, we aim to uncover patterns and insights in the relationship between public sentiment, specific news events, and Apple’s stock performance. This exploration could provide valuable knowledge for investors, analysts, and anyone keen on understanding the dynamics of stock price movements and market influences on Apple."
  },
  {
    "objectID": "proposal.html#analysis-plan",
    "href": "proposal.html#analysis-plan",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Analysis plan",
    "text": "Analysis plan\n\nApproach for Question\nTo address the question in a general sense, we would employ a combination of data analysis and predictive modeling. By collecting historical data on stock prices and news headlines, we can examine the historical relationship between news sentiment and market movements. This analysis might involve quantifying sentiment in news headlines, identifying patterns, and exploring correlations. Furthermore, predictive models can be developed to forecast potential future stock price changes based on these insights. The goal is to gain a better understanding of how news impacts stock prices and, if possible, use this knowledge to make informed predictions about future market behavior."
  },
  {
    "objectID": "proposal.html#plan-summary",
    "href": "proposal.html#plan-summary",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Plan Summary:",
    "text": "Plan Summary:\n\nData Collection:\n\nGather a diverse dataset of Apple-related news headlines, industry reports, and social media reviews during the specified timeframe.\nCollect historical stock price data for Apple Inc. corresponding to the same period.\n\n\n\nData Preprocessing:\n\nClean and preprocess the text data, including handling any language-specific characters, removing duplicates, and ensuring consistency.\nPreprocess the stock price data, ensuring alignment with the timeframes of the news dataset.\n\n\n\nSentiment Analysis:\n\nUtilize natural language processing techniques to perform sentiment analysis on the collected news headlines.\nCategorize sentiments as positive, negative, or neutral to quantify the overall sentiment trends.\n\n\n\nCorrelation Analysis:\n\nIdentify key news events and occurrences during the specified timeframe. Analyze how the sentiment trends derived from news headlines correlate with Apple’s stock price movements.\nExplore potential correlations between news events related to other stocks and subsequent impacts on Apple’s stock.\n\n\n\nVisualization and Interpretation:\n\nCreate visualizations to illustrate the sentiment trends and stock price movements over time.\nInterpret the findings, identifying patterns, anomalies, and potential cause-effect relationships.\n\n\n\nStatistical Analysis:\n\nConduct statistical tests to validate the significance of observed correlations and trends.\nEvaluate the strength and direction of correlations between sentiment and stock price movements.\n\n\n\nDiscussion and Conclusions:\n\nSummarize the key findings and their implications for understanding the influence of news sentiment on Apple’s stock prices.\nDiscuss any broader market influences on Apple’s stock performance. Consider limitations, potential biases, and areas for future research."
  },
  {
    "objectID": "proposal.html#weekly-plan-of-attack",
    "href": "proposal.html#weekly-plan-of-attack",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Weekly Plan of Attack",
    "text": "Weekly Plan of Attack\n\n\n\n\n\n\n\n\n\nWeek\nWeekly Tasks\nPersons in Charge\nBackup\n\n\n\n\nuntil November 8th\nExplore and finalize the dataset and the problem statements\nEveryone\nEveryone\n\n\n-\nComplete the proposal and assign some high-level tasks\nEveryone\nEveryone\n\n\nNovember 9th to 15th\nGetting to know about yfinance library and news headlines\nEveryone\nEveryone\n\n\n-\nData cleaning and Data pre-processing\nEshaan\nAravind\n\n\n-\nQuestion specific exploration and data categorization\nLikith\nSanjay\n\n\nNovember 16th to 22nd\nPerforming Sentiment analysis for Q1\nSanjay\nLikith\n\n\n-\nPerforming Sentiment analysis and find correlations for Q1\nVamsi\nAravind\n\n\n-\nExploring on how to integrate our analysis with real-time prices.\nAravind\nLikith\n\n\nNovember 23rd to 29th\nGenerating remaining parts of the plots for Q1\nEshaan\nSanjay\n\n\n-\nImproving the generated sentiment analysis model\nSanjay\nVamsi\n\n\n-\nStart integrating quarto and our model\nLikith\nEshaan\n\n\nNovember 30th to December 6th\nRefining the code for code review with comments\nEveryone\nEveryone\n\n\n-\nMaking a few changes on the model to test it based on historical data\nVamsi\nAravind\n\n\n-\nContinue with the integration of quarto and our models\nAravind\nEshaan\n\n\nDecember 7th to 13th\nComplete the quarto website with presentable data\nEveryone\nEveryone\n\n\n-\nReview the model and debugging\nEveryone\nEveryone\n\n\n-\nWrite-up and presentation for the project\nEveryone\nEveryone"
  },
  {
    "objectID": "proposal.html#repo-organization",
    "href": "proposal.html#repo-organization",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "Repo Organization",
    "text": "Repo Organization\nThe following are the folders involved in the Project repository.\n\n‘data/’: Used for storing any necessary data files for the project, such as input files.\n‘images/’: Used for storing image files used in the project.\n‘_extra/’: Used to brainstorm our analysis which won’t impact our project workflow.\n‘_freeze/’: This folder is used to store the generated files during the build process. These files represent the frozen state of the website at a specific point in time.\n‘.github/’: Folder for storing github templates and workflow.\n\n\n\n\n\n\n\nNote:\n\n\n\nThese are the planned approaches, and we intend to explore and solve the problem statement which we came up with. Parts of our approach might change in the final implementation."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final-Project",
    "section": "",
    "text": "Our aim is to conduct sentiment analysis on Apple Inc. stock by analysing diverse sources, including media coverage, industry reports, social media reviews, and investor opinions from news headlines. By leveraging sentiment analysis techniques, our project intends to uncover patterns in sentiment that may correlate with stock price movements. The insights gained could provide valuable perspectives on how public perception influences Apple’s stock performance, offering potential benefits for investors and analysts."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "Final-Project",
    "section": "",
    "text": "Our aim is to conduct sentiment analysis on Apple Inc. stock by analysing diverse sources, including media coverage, industry reports, social media reviews, and investor opinions from news headlines. By leveraging sentiment analysis techniques, our project intends to uncover patterns in sentiment that may correlate with stock price movements. The insights gained could provide valuable perspectives on how public perception influences Apple’s stock performance, offering potential benefits for investors and analysts."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Final-Project",
    "section": "Introduction",
    "text": "Introduction\nIn an era dominated by data, the dynamics of financial markets have become increasingly intricate. Investors and analysts are continuously seeking innovative approaches to gain insights into stock price movements. This project embarks on a comprehensive exploration of sentiment analysis as a tool to unravel the nuanced relationship between public sentiment, news events, and the stock performance of Apple Inc."
  },
  {
    "objectID": "index.html#question",
    "href": "index.html#question",
    "title": "Final-Project",
    "section": "Question",
    "text": "Question\nHow can sentiment analysis of news headlines contribute to understanding the stock price movements of Apple Inc., and what insights can be gained regarding the interconnectedness of external factors and their impact on Apple’s stock performance in the broader market context?"
  },
  {
    "objectID": "index.html#approach",
    "href": "index.html#approach",
    "title": "Final-Project",
    "section": "Approach",
    "text": "Approach"
  },
  {
    "objectID": "index.html#code",
    "href": "index.html#code",
    "title": "Final-Project",
    "section": "Code",
    "text": "Code\n\n\nCode\n'''\n#Remove the library installing commands from comment \n!pip install yfinance\n!pip install vaderSentiment\n!pip install pandas \n!pip install matplotlib\n!pip install nltk\n!pip install plotly\n!pip install wordcloud\n'''\n\n\n'\\n#Remove the library installing commands from comment \\n!pip install yfinance\\n!pip install vaderSentiment\\n!pip install pandas \\n!pip install matplotlib\\n!pip install nltk\\n!pip install plotly\\n!pip install wordcloud\\n'\n\n\n\n\nCode\n# Imports essential libraries for data manipulation, visualization, sentiment analysis, and financial data retrieval using Yahoo Finance.\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom dateutil import parser\nimport requests\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport yfinance as yf\nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nfrom datetime import datetime, timedelta\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n\n\n\nCode\n# Create a Ticker object for the stock with symbol 'AAPL' (Apple Inc.)\napple=yf.Ticker(\"AAPL\")\n# Retrieve historical stock data for the last month for the specified ticker\napple_data=apple.history(period='1mo')\n#Restting date from index to column and converting it to '%Y-%m-%d' format\napple_data.reset_index(inplace=True)\napple_data['Date'] = apple_data['Date'].dt.strftime('%Y-%m-%d')\n\n\n\n\nCode\n# Setting up necessary parameters for the API request\napi_key='9dcab5d0d86940459623ec7dea5c8d36'\nstock_symbol =\"AAPL\"\n# Setting up date range for fetching news data (last 30 days)\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=29)\n\n# Formatting dates for the API request\nfrom_date = start_date.strftime(\"%Y-%m-%d\")\nto_date = end_date.strftime(\"%Y-%m-%d\")\n\n# Constructing the final URL for fetching news within the date range\nnews_url = f\"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en\"\n\n# Making a request to the API with the specified date range\nresponse = requests.get(news_url)\n\n# Checking if the API request was successful (status code 200)\nif response.status_code == 200:\n    # Parsing the JSON response to retrieve news articles\n    news_data = response.json()\n    articles = news_data['articles']\n    # Extracting headlines and publication dates from articles\n    headlines = [(article['title'], article['publishedAt']) for article in articles]\nelse:\n  # Displaying an error message if the API request fails\n    print(\"Failed to retrieve news data.\")\n\n\n\n\nCode\n# Initialize an empty list to store Apple-related headlines with their respective dates\napple_related_headlines=[]\n# Iterate through headlines and their associated publication dates\nfor headline, _ in headlines:\n    try:\n        # Attempt to parse the date using a parser (assuming it's in a valid format)\n        date = parser.parse(_)\n        # Check if the headline contains the keyword 'Apple'\n        if 'Apple' in headline:\n            # If it does, append the headline and its date to the list\n            apple_related_headlines.append((headline, date))\n    except ValueError:\n        # Ignore and continue if there's an issue parsing the date\n        pass\n\n# Sort the list of Apple-related headlines by date\napple_related_headlines.sort(key=lambda x: x[1])\n\n# Display the sorted Apple-related headlines along with their dates\n#for data in apple_related_headlines:\n#    print(f'Headline: {data[0]}\\nDate: {data[1]}\\n')\n    \n# Create a DataFrame from the list of Apple-related headlines with dates\ndf_apple_related_headlines = pd.DataFrame(apple_related_headlines, columns= ['Headlines', 'date'])\n\n# Remove duplicate headlines to retain unique entries\ndf_unique_apple_related_headlines = df_apple_related_headlines.drop_duplicates(subset=['Headlines'])\n\n\n\n\nCode\ntext = ' '.join(df_unique_apple_related_headlines['Headlines'])\n\n# Generate the word cloud\nwordcloud = WordCloud(width=800, height=400, background_color='white').generate(text)\n\n# Display the word cloud using matplotlib\nplt.figure(figsize=(10, 6))\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis('off')\nplt.title('Word Cloud of Headlines')\nplt.show()\n\n\n\n\n\n\n\nCode\n# Initialize the SentimentIntensityAnalyzer\nanalyzer = SentimentIntensityAnalyzer()\n# Initialize lists to store sentiment scores for each headline\nsentiments = [] # Stores headlines\nneg_scores = [] # Stores negative sentiment scores\nneu_scores = [] # Stores neutral sentiment scores\npos_scores = [] # Stores positive sentiment scores\ncompound_scores = [] # Stores compound sentiment scores\n\n# Iterate through each headline in the DataFrame to analyze sentiment\nfor sentence in df_unique_apple_related_headlines['Headlines']:\n    # Perform sentiment analysis on each headline using the analyzer\n    vs = analyzer.polarity_scores(sentence)\n    # Append headline, negative, neutral, positive, and compound scores to respective lists\n    sentiments.append(sentence)\n    neg_scores.append(vs['neg'])\n    neu_scores.append(vs['neu'])\n    pos_scores.append(vs['pos'])\n    compound_scores.append(vs['compound'])\n\n\n\n\nCode\n# Create a DataFrame to store sentiment scores of the headlines\nsentiment_df = pd.DataFrame({\n    'Headlines': sentiments,\n    'Negative Score': neg_scores,\n    'Neutral Score': neu_scores,\n    'Positive Score': pos_scores,\n    'Compound Score': compound_scores\n})\n\n\n\n\nCode\n# Merge the unique Apple-related headlines DataFrame and the sentiment scores DataFrame\nmerged_df= pd.merge(df_unique_apple_related_headlines, sentiment_df, how=\"inner\", on=[\"Headlines\"])\n# Convert the 'date' column to required format\nmerged_df['date'] = merged_df['date'].dt.strftime('%Y-%m-%d')\n\n\n\n\nCode\n# Creating traces for the subplots\ntrace1 = go.Scatter(x=apple_data['Date'], y=apple_data['Close'], mode='lines', name='AAPL Close Price')\ntrace2 = go.Scatter(x=merged_df['date'], y=merged_df['Compound Score'], mode='lines', name='Sentiment Score', line=dict(color='orange'))\n\n# Creating subplot figure\nfig = make_subplots(rows=2, cols=1, subplot_titles=('AAPL Stock Price', 'Sentiment Analysis of News Headlines'))\n\n# Adding traces to subplots\nfig.add_trace(trace1, row=1, col=1)\nfig.add_trace(trace2, row=2, col=1)\n\n# Updating layout\nfig.update_layout(height=600, width=800, title_text=\"AAPL Stock Price and Sentiment Analysis\")\n\n# Updating x-axis and y-axis labels\nfig.update_xaxes(title_text=\"Date\", row=2, col=1)\nfig.update_yaxes(title_text=\"Price\", row=1, col=1)\nfig.update_yaxes(title_text=\"Sentiment Score\", row=2, col=1)\n\n# Displaying the interactive subplot\nfig.show()\n\n\n\n                                                \n\n\n\n\nCode\n# Stock symbols to analyze (add more symbols as needed)\nstock_symbols = [\"LNVGY\", \"DELL\", \"HPE\", \"MSFT\", \"SSNLF\"]\napi_key = '9dcab5d0d86940459623ec7dea5c8d36'\nall_headlines = []\n\n# Set the date range for news retrieval\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=20)\nfrom_date = start_date.strftime(\"%Y-%m-%d\")\nto_date = end_date.strftime(\"%Y-%m-%d\")\n\n# Retrieve news data for each stock symbol\nfor stock_symbol in stock_symbols:\n    query_params = {\n        'q': f'{stock_symbol}',\n        'apiKey': api_key,\n        'language': 'en',\n        'country': 'us',\n    }\n\n    news_url = f\"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en\"\n    response = requests.get(news_url)\n\n    if response.status_code == 200:\n        news_data = response.json()\n        articles = news_data['articles']\n        headlines = [(article['title'], article['publishedAt']) for article in articles]\n        all_headlines.extend(headlines)\n    else:\n        print(f\"Failed to retrieve news data for {stock_symbol}.\")\n\n# Filter headlines containing the company name\ncompany_related_headlines = []\n\nfor headline, _ in all_headlines:\n    try:\n        date = parser.parse(_)\n        for stock_symbol in stock_symbols:\n            if stock_symbol in headline:\n                company_related_headlines.append((headline, date, stock_symbol))\n    except ValueError:\n        pass\n\n# Sort headlines by date\ncompany_related_headlines.sort(key=lambda x: x[1])\n\n# Display company-related headlines\nfor data in company_related_headlines:\n    print(f'Headline: {data[0]}\\nDate: {data[1]}\\nSymbol: {data[2]}\\n')\n\n# Sentiment analysis using NLTK's VADER\nanalyzer = SentimentIntensityAnalyzer()\nsentiments = []\nneg_scores = []\nneu_scores = []\npos_scores = []\ncompound_scores = []\n\n# Analyze sentiment for each headline\nfor sentence in company_related_headlines:\n    vs = analyzer.polarity_scores(sentence[0])\n    sentiments.append(sentence[0])\n    neg_scores.append(vs['neg'])\n    neu_scores.append(vs['neu'])\n    pos_scores.append(vs['pos'])\n    compound_scores.append(vs['compound'])\n\n# Create a DataFrame for sentiment scores\ncompany_sentiment_df = pd.DataFrame({\n    'Headlines': sentiments,\n    'Negative Score': neg_scores,\n    'Neutral Score': neu_scores,\n    'Positive Score': pos_scores,\n    'Compound Score': compound_scores\n})\n\n# Merge sentiment data with company-related headlines\ncompany_merged_df = pd.merge(pd.DataFrame(company_related_headlines, columns=['Headlines', 'date', 'Symbol']),\n                             company_sentiment_df, how=\"inner\", on=[\"Headlines\"])\n\n# Format date columns\ncompany_merged_df['date'] = company_merged_df['date'].dt.strftime('%Y-%m-%d')\ncompany_merged_df['date'] = pd.to_datetime(company_merged_df['date'])\n\n# Group sentiment scores by date\ngrouped_df = company_merged_df.groupby('date')['Compound Score'].mean().reset_index()\n\n# Display grouped sentiment scores\n#print(grouped_df)\n\n# Retrieve Apple stock data using Yahoo Finance API\napple = yf.Ticker(\"AAPL\")\napple_data = apple.history(period='1mo')\n\n# Format date columns for merging\napple_data['date'] = apple_data.index.to_series().dt.strftime('%Y-%m-%d')\ngrouped_df['date'] = pd.to_datetime(grouped_df['date'])\napple_data['date'] = pd.to_datetime(apple_data['date'])\n\n# Merge sentiment scores with Apple stock data\nfull_merged_data = pd.merge(grouped_df, apple_data, how='inner', left_on='date', right_on='date')\n\n# Calculate correlation between 'Compound Score' and 'Close'\ncorrelation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])\n#print(f\"Correlation between Compound Score and Closing Price: {correlation}\")\n\n#print(full_merged_data)\n\n# Plotting\n# Calculate correlation between 'Compound Score' and 'Close'\nreversed_correlation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])\n#print(f\"Correlation between Compound Score and Closing Price: {reversed_correlation}\")\n\n# Create subplots with two y-axes\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.update_layout(\n    title='Competitors Sentiment Scores vs. Apple Closing Price',\n    xaxis_title='Date',\n    plot_bgcolor='white',  # Set plot background color\n    paper_bgcolor='white',  # Set paper background color\n)\n\n# Identify increases and decreases in Closing Price\npositive_changes = full_merged_data['Close'].diff().gt(0)\nnegative_changes = full_merged_data['Close'].diff().lt(0)\n\n# Add traces for the Reversed Compound Score, Closing Price, and changes\nfig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Compound Score'],\n                         mode='lines+markers', name='Compound Score'), secondary_y=False)\nfig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Close'],\n                         mode='lines+markers', name='Closing Price', line=dict(color='darkgoldenrod')), secondary_y=True)\nfig.add_trace(go.Scatter(x=full_merged_data['date'][positive_changes], y=full_merged_data['Close'][positive_changes],\n                         mode='markers', name='Positive Change', marker=dict(color='green', size=8)),\n              secondary_y=True)\nfig.add_trace(go.Scatter(x=full_merged_data['date'][negative_changes], y=full_merged_data['Close'][negative_changes],\n                         mode='markers', name='Negative Change', marker=dict(color='red', size=8)),\n              secondary_y=True)\n\n# Update y-axis labels and styles\nfig.update_yaxes(title_text='Compound Score', secondary_y=False, color='blue', showline=True, linecolor='blue', linewidth=2)\nfig.update_yaxes(title_text='Closing Price', secondary_y=True, color='darkgoldenrod', showline=True, linecolor='darkgoldenrod', linewidth=2)\nfig.update_xaxes(showgrid=True, zeroline=True, gridcolor='lightgrey', gridwidth=0.5, showline=True, linecolor='#2a3f5f', linewidth=2)  # Show minimal gridlines\n\n# Display the plot\nfig.show()\n\n\nHeadline: IronYun and HPE Introduce First AI-Powered Video Analytics Solution Validated on HPE ProLiant Gen 11\nDate: 2023-11-22 11:12:00+00:00\nSymbol: HPE\n\nHeadline: Hewlett Packard Enterprise (NYSE:HPE) Shares Purchased by Heritage Trust Co\nDate: 2023-11-24 17:28:47+00:00\nSymbol: HPE\n\nHeadline: Stocks to Watch Tuesday: Carlyle, PDD, Zscaler, HPE\nDate: 2023-11-28 15:24:05+00:00\nSymbol: HPE\n\nHeadline: State Board of Administration of Florida Retirement System Reduces Holdings in Hewlett Packard Enterprise (NYSE:HPE)\nDate: 2023-11-28 15:38:45+00:00\nSymbol: HPE\n\nHeadline: HPE sees promising future and double-digit growth in AI\nDate: 2023-11-28 21:50:08+00:00\nSymbol: HPE\n\nHeadline: HPE’s earnings edge past Wall Street’s estimates, driven by upsurge in AI\nDate: 2023-11-29 00:11:54+00:00\nSymbol: HPE\n\nHeadline: HPE: EPS down 9% in Q4\nDate: 2023-11-29 09:12:04+00:00\nSymbol: HPE\n\nHeadline: HPE Announces Q4 FY2023 and Full Year Results\nDate: 2023-11-29 12:00:00+00:00\nSymbol: HPE\n\nHeadline: Korea Telecom Selects HPE Aruba Networking SD-WAN to Help Deliver Faster Global Connectivity for Enterprises via AWS Cloud WAN\nDate: 2023-11-29 13:01:01+00:00\nSymbol: HPE\n\nHeadline: 123,254 Shares in Hewlett Packard Enterprise (NYSE:HPE) Purchased by Trexquant Investment LP\nDate: 2023-11-29 13:46:45+00:00\nSymbol: HPE\n\nHeadline: Trexquant Investment LP Invests $2.07 Million in Hewlett Packard Enterprise (NYSE:HPE)\nDate: 2023-11-29 14:18:51+00:00\nSymbol: HPE\n\nHeadline: Server sales down 31% at HPE as enterprises hack spending\nDate: 2023-11-29 15:02:08+00:00\nSymbol: HPE\n\nHeadline: Sustainability, security and AI take center stage at HPE Discover: theCUBE breaks down the day 1 keynote\nDate: 2023-11-29 16:57:38+00:00\nSymbol: HPE\n\nHeadline: The evolution of Microsoft and HPE’s alliance in shaping the hybrid cloud landscape\nDate: 2023-11-29 21:18:43+00:00\nSymbol: HPE\n\nHeadline: Following MSFT & GOOG Lead, AWS Embraces Nvidia And Upgrades Own Chips\nDate: 2023-11-30 00:06:27+00:00\nSymbol: MSFT\n\nHeadline: Ofinno Slashes Cloud Costs Up to 90% with HPE GreenLake\nDate: 2023-11-30 03:30:00+00:00\nSymbol: HPE\n\nHeadline: Ofinno Slashes Cloud Costs Up to 90% with HPE GreenLake\nDate: 2023-11-30 08:31:01+00:00\nSymbol: HPE\n\nHeadline: HPE, Nvidia partner on AI-optimized platforms and services\nDate: 2023-11-30 08:45:14+00:00\nSymbol: HPE\n\nHeadline: HPE targets enterprises with Nvidia-powered platform for tuning AI\nDate: 2023-11-30 11:45:05+00:00\nSymbol: HPE\n\nHeadline: HPE targets enterprises with Nvidia-powered platform for tuning AI\nDate: 2023-11-30 11:48:08+00:00\nSymbol: HPE\n\nHeadline: Panagora Asset Management Inc. Sells 1,699,552 Shares of Hewlett Packard Enterprise (NYSE:HPE)\nDate: 2023-11-30 14:48:47+00:00\nSymbol: HPE\n\nHeadline: Transforming IT operations: Exploring HPE’s AI-driven observability solutions\nDate: 2023-11-30 17:00:36+00:00\nSymbol: HPE\n\nHeadline: Providing a supercomputing solution for generative AI: Inside HPE and Nvidia’s collaboration\nDate: 2023-11-30 18:00:37+00:00\nSymbol: HPE\n\nHeadline: Hewlett Packard Enterprise (NYSE:HPE) Announces Earnings Results, Beats Expectations By $0.02 EPS\nDate: 2023-11-30 18:56:45+00:00\nSymbol: HPE\n\nHeadline: Data reshaped: HPE’s AI-enhanced storage for the modern enterprise\nDate: 2023-11-30 20:40:36+00:00\nSymbol: HPE\n\nHeadline: AMD and HPE forge new paths in sustainable computing\nDate: 2023-11-30 21:40:56+00:00\nSymbol: HPE\n\nHeadline: How Atea and HPE are pioneering eco-friendly digital transformation\nDate: 2023-12-01 16:11:45+00:00\nSymbol: HPE\n\nHeadline: HPE to start pumping AI capabilities into Greenlake under Project Ethan\nDate: 2023-12-01 17:04:07+00:00\nSymbol: HPE\n\nHeadline: HPE to start pumping AI capabilities into Greenlake under Project Ethan\nDate: 2023-12-01 17:16:08+00:00\nSymbol: HPE\n\nHeadline: Intel and HPE prioritize sustainability in processor design and manufacturing\nDate: 2023-12-01 20:25:53+00:00\nSymbol: HPE\n\nHeadline: HPE ProLiant DL320 Gen11 Server Review\nDate: 2023-12-01 20:55:43+00:00\nSymbol: HPE\n\nHeadline: HPE says impact of AI on enterprise not 'overstated.' It must be hoping so\nDate: 2023-12-01 21:03:12+00:00\nSymbol: HPE\n\nHeadline: HPE says impact of AI on enterprise not 'overstated.' It must be hoping so\nDate: 2023-12-01 21:08:48+00:00\nSymbol: HPE\n\nHeadline: HPE and the Ryder Cup: Partnering for innovation and sustainability in golf\nDate: 2023-12-01 21:40:29+00:00\nSymbol: HPE\n\nHeadline: Bridging the gap: HPE’s hybrid cloud and AI integration strategy\nDate: 2023-12-04 22:30:59+00:00\nSymbol: HPE\n\nHeadline: Microsoft and HPE unite to integrate AI into cloud solutions\nDate: 2023-12-04 23:30:16+00:00\nSymbol: HPE\n\nHeadline: Three insights you might have missed from the ‘HPE Discover Barcelona’ event\nDate: 2023-12-05 20:25:30+00:00\nSymbol: HPE\n\nHeadline: MSFT Stock, PANW, CRWD, ZS Lead Screen Of 22 Stocks To Watch As AI Boom Continues\nDate: 2023-12-05 20:38:25+00:00\nSymbol: MSFT\n\nHeadline: KIOXIA RM7 Series Value SAS SSDs Now Available for HPE ProLiant Gen11 Servers\nDate: 2023-12-05 21:44:58+00:00\nSymbol: HPE\n\nHeadline: Here’s Why You Should Keep an Eye on Your Microsoft (MSFT) Investment\nDate: 2023-12-07 08:59:07+00:00\nSymbol: MSFT\n\nHeadline: (PR) New Kioxia RM7 Series Value SAS SSDs Debut on HPE Servers\nDate: 2023-12-07 11:47:13+00:00\nSymbol: HPE\n\nHeadline: Microsoft (NASDAQ: MSFT) Vs. Meta (NASDAQ: META) — Analyzing $1,000 Investments From May 18, 2012\nDate: 2023-12-07 17:24:41+00:00\nSymbol: MSFT\n\nHeadline: Microsoft (NASDAQ: MSFT) Vs. Meta (NASDAQ: META)\nDate: 2023-12-07 20:56:07+00:00\nSymbol: MSFT\n\nHeadline: HPE GreenLake aims to bridge the gap in the hybrid cloud world\nDate: 2023-12-08 16:39:22+00:00\nSymbol: HPE\n\nHeadline: Is Microsoft (MSFT) Still a Great Investment Choice?\nDate: 2023-12-10 05:17:09+00:00\nSymbol: MSFT\n\nHeadline: Is Microsoft (MSFT) Still a Great Investment Choice?\nDate: 2023-12-10 05:17:09+00:00\nSymbol: MSFT\n\n\n\n\n                                                \n\n\n\n\nCode\n# Global factors vs Apple stock\nimport seaborn as sns\n\n# Stock symbols to analyze (add more symbols as needed)\nstock_symbols = [\"pandemic\", \"tornado\", \"hurricane\", \"Pandemic\", \"economic crisis\",\"earthquake\",\"Global recession\", \"currency\"]\napi_key = 'ef5a0ad43b08420bb13b761a3a1239fa'\nall_headlines = []\n\n# Set the date range for news retrieval\nend_date = datetime.now()\nstart_date = end_date - timedelta(days=20)\nfrom_date = start_date.strftime(\"%Y-%m-%d\")\nto_date = end_date.strftime(\"%Y-%m-%d\")\n\n# Retrieve news data for each stock symbol\nfor stock_symbol in stock_symbols:\n    query_params = {\n        'q': f'{stock_symbol}',\n        'apiKey': api_key,\n        'language': 'en',\n        'country': 'us',\n    }\n\n    news_url = f\"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en\"\n    response = requests.get(news_url)\n\n    if response.status_code == 200:\n        news_data = response.json()\n        articles = news_data['articles']\n        headlines = [(article['title'], article['publishedAt']) for article in articles]\n        all_headlines.extend(headlines)\n    else:\n        print(f\"Failed to retrieve news data for {stock_symbol}.\")\n\n# Filter headlines containing the company name\ncompany_related_headlines = []\n\nfor headline, _ in all_headlines:\n    try:\n        date = parser.parse(_)\n        for stock_symbol in stock_symbols:\n            if stock_symbol in headline:\n                company_related_headlines.append((headline, date, stock_symbol))\n    except ValueError:\n        pass\n\n# Sort headlines by date\ncompany_related_headlines.sort(key=lambda x: x[1])\n\n# Display company-related headlines\n#for data in company_related_headlines:\n#    print(f'Headline: {data[0]}\\nDate: {data[1]}\\nSymbol: {data[2]}\\n')\n\n# Sentiment analysis using NLTK's VADER\nanalyzer = SentimentIntensityAnalyzer()\nsentiments = []\nneg_scores = []\nneu_scores = []\npos_scores = []\ncompound_scores = []\n\n# Analyze sentiment for each headline\nfor sentence in company_related_headlines:\n    vs = analyzer.polarity_scores(sentence[0])\n    sentiments.append(sentence[0])\n    neg_scores.append(vs['neg'])\n    neu_scores.append(vs['neu'])\n    pos_scores.append(vs['pos'])\n    compound_scores.append(vs['compound'])\n\n# Create a DataFrame for sentiment scores\ncompany_sentiment_df = pd.DataFrame({\n    'Headlines': sentiments,\n    'Negative Score': neg_scores,\n    'Neutral Score': neu_scores,\n    'Positive Score': pos_scores,\n    'Compound Score': compound_scores\n})\n\n# Merge sentiment data with company-related headlines\ncompany_merged_df = pd.merge(pd.DataFrame(company_related_headlines, columns=['Headlines', 'date', 'Symbol']),\n                             company_sentiment_df, how=\"inner\", on=[\"Headlines\"])\n\n# Format date columns\ncompany_merged_df['date'] = company_merged_df['date'].dt.strftime('%Y-%m-%d')\ncompany_merged_df['date'] = pd.to_datetime(company_merged_df['date'])\n\n# Group sentiment scores by date\ngrouped_df = company_merged_df.groupby('date')['Compound Score'].mean().reset_index()\n\n# Display grouped sentiment scores\n#print(grouped_df)\n\n# Retrieve Apple stock data using Yahoo Finance API\napple = yf.Ticker(\"AAPL\")\napple_data = apple.history(period='1mo')\n\n# Format date columns for merging\napple_data['date'] = apple_data.index.to_series().dt.strftime('%Y-%m-%d')\ngrouped_df['date'] = pd.to_datetime(grouped_df['date'])\napple_data['date'] = pd.to_datetime(apple_data['date'])\n\n# Merge sentiment scores with Apple stock data\nfull_merged_data = pd.merge(grouped_df, apple_data, how='inner', left_on='date', right_on='date')\n\n# Calculate correlation between 'Compound Score' and 'Close'\ncorrelation = full_merged_data['Compound Score'].corr(full_merged_data['Close'])\nprint(f\"Correlation between Compound Score and Closing Price: {correlation}\")\n\nprint(full_merged_data)\n# Plotting\n \n\n# Reverse the interpretation of sentiment scores\nfull_merged_data['Reversed Compound Score'] = -full_merged_data['Compound Score']\n\n# Calculate correlation between 'Reversed Compound Score' and 'Close'\nreversed_correlation = full_merged_data['Reversed Compound Score'].corr(full_merged_data['Close'])\nprint(f\"Correlation between Compound Score and Closing Price: {reversed_correlation}\")\n\n# Create subplots with two y-axes\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\nfig.update_layout(\n    title='Global Factors Sentiment Scores vs. Apple Closing Price',\n    xaxis_title='Date',\n    plot_bgcolor='white',  # Set plot background color\n    paper_bgcolor='white',  # Set paper background color\n)\n\n# Identify increases and decreases in Closing Price\npositive_changes = full_merged_data['Close'].diff().gt(0)\nnegative_changes = full_merged_data['Close'].diff().lt(0)\n\n# Add traces for the Reversed Compound Score, Closing Price, and changes\nfig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Reversed Compound Score'],\n                         mode='lines+markers', name='Compound Score'), secondary_y=False)\nfig.add_trace(go.Scatter(x=full_merged_data['date'], y=full_merged_data['Close'],\n                         mode='lines+markers', name='Closing Price', line=dict(color='darkgoldenrod')), secondary_y=True)\nfig.add_trace(go.Scatter(x=full_merged_data['date'][positive_changes], y=full_merged_data['Close'][positive_changes],\n                         mode='markers', name='Positive Change', marker=dict(color='green', size=8)),\n              secondary_y=True)\nfig.add_trace(go.Scatter(x=full_merged_data['date'][negative_changes], y=full_merged_data['Close'][negative_changes],\n                         mode='markers', name='Negative Change', marker=dict(color='red', size=8)),\n              secondary_y=True)\n\n# Update y-axis labels and styles\nfig.update_yaxes(title_text='Compound Score', secondary_y=False, color='blue', showline=True, linecolor='blue', linewidth=2)\nfig.update_yaxes(title_text='Closing Price', secondary_y=True, color='darkgoldenrod', showline=True, linecolor='darkgoldenrod', linewidth=2)\nfig.update_xaxes(showgrid=True, zeroline=True, gridcolor='lightgrey', gridwidth=0.5, showline=True, linecolor='#2a3f5f', linewidth=2)  # Show minimal gridlines\n\n# Display the plot\nfig.show() \n\n\nCorrelation between Compound Score and Closing Price: -0.2969194951580508\n         date  Compound Score        Open        High         Low       Close  \\\n0  2023-11-21        0.211350  191.410004  191.520004  189.740005  190.639999   \n1  2023-11-22       -0.130044  191.490005  192.929993  190.830002  191.309998   \n2  2023-11-24        0.565136  190.869995  190.899994  189.250000  189.970001   \n3  2023-11-27        0.636900  189.919998  190.669998  188.899994  189.789993   \n4  2023-11-28       -0.045457  189.779999  191.080002  189.399994  190.399994   \n5  2023-11-29       -0.107636  190.899994  192.089996  188.970001  189.369995   \n6  2023-11-30       -0.306670  189.839996  190.320007  188.190002  189.949997   \n7  2023-12-04        0.008767  189.979996  190.050003  187.449997  189.429993   \n8  2023-12-05        0.094175  190.210007  194.399994  190.179993  193.419998   \n9  2023-12-06       -0.361200  194.449997  194.759995  192.110001  192.320007   \n10 2023-12-07       -0.029467  193.630005  195.000000  193.589996  194.270004   \n11 2023-12-08       -0.136600  194.199997  195.990005  193.669998  195.710007   \n\n      Volume  Dividends  Stock Splits  \n0   38134500        0.0           0.0  \n1   39617700        0.0           0.0  \n2   24048300        0.0           0.0  \n3   40552600        0.0           0.0  \n4   38415400        0.0           0.0  \n5   43014200        0.0           0.0  \n6   48794400        0.0           0.0  \n7   43389500        0.0           0.0  \n8   66628400        0.0           0.0  \n9   41089700        0.0           0.0  \n10  47477700        0.0           0.0  \n11  53377300        0.0           0.0  \nCorrelation between Compound Score and Closing Price: 0.2969194951580508"
  },
  {
    "objectID": "index.html#discussion",
    "href": "index.html#discussion",
    "title": "Final-Project",
    "section": "Discussion",
    "text": "Discussion\nIn this project, we delved into the dynamic intersection of finance and sentiment analysis, with a specific focus on Apple stock. Employing the SentimentIntensityAnalyzer function from the vaderSentiment library in Python, our exploration revolved around gauging the emotional tone surrounding Apple’s stock through the analysis of textual data. The initial phase involved data acquisition, leveraging the yfinance library to retrieve comprehensive stock data via API calls.\nFollowing this, sentiment analysis was conducted using the robust vaderSentiment tool, providing a nuanced understanding of sentiment intensity in the context of textual information. The obtained sentiment scores were then juxtaposed against Apple’s stock prices, resulting in a visual representation that illuminated the intricate relationship between sentiment dynamics and market trends.\nThe comparison plot unearthed compelling insights into the potential correlation between sentiment shifts and stock price movements. Peaks and troughs in sentiment scores aligned with notable fluctuations in the stock chart, suggesting a discernible influence of public sentiment on market dynamics. However, it is crucial to recognize the multifaceted nature of stock markets and the complex interplay of various factors impacting stock prices. While sentiment analysis offers valuable insights, it should be considered as one element within the broader landscape of financial analysis.\nIn conclusion, this project exemplifies the integration of sentiment analysis techniques with financial data to derive meaningful insights into the emotional undercurrents surrounding Apple stock. As we navigate the complexities of stock markets, this approach introduces a nuanced layer to our comprehension, laying the groundwork for continued exploration and refinement of strategies in financial decision-making."
  },
  {
    "objectID": "presentation.html#objective",
    "href": "presentation.html#objective",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Objective",
    "text": "Objective\n\n\nAnalyze sentiment in news headlines about Apple Inc. stock to assess public perception.\nExplore correlation between sentiment analysis results and Apple’s stock performance for investor insights."
  },
  {
    "objectID": "presentation.html#question",
    "href": "presentation.html#question",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Question",
    "text": "Question\n\n\nHow does sentiment analysis of news headlines provide insights into Apple Inc.’s stock price movements, revealing the influence of external factors on its market performance?\nWhat valuable insights can be derived from correlating sentiment analysis of news headlines with Apple’s stock behavior, elucidating the impact of external factors on the broader market context?"
  },
  {
    "objectID": "presentation.html#motivation",
    "href": "presentation.html#motivation",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Motivation",
    "text": "Motivation\n\n\nUncover potential correlations between public perception, external factors on Apple Inc.’s stock performance\nUnderstanding how sentiment influences market movements"
  },
  {
    "objectID": "presentation.html#workflow",
    "href": "presentation.html#workflow",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Workflow",
    "text": "Workflow\n\n\nPackage Integration\nData Acquisition\nData Refinement\nSentiment Analysis\nPlotted results and Interpretation"
  },
  {
    "objectID": "presentation.html#apple-inc.-stock-price-data",
    "href": "presentation.html#apple-inc.-stock-price-data",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Apple Inc. Stock Price Data",
    "text": "Apple Inc. Stock Price Data\n\nThe data is retrived from Yahoo-Finance python library in real-time."
  },
  {
    "objectID": "presentation.html#apple-inc.-news-headlines-data",
    "href": "presentation.html#apple-inc.-news-headlines-data",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Apple Inc. News Headlines Data",
    "text": "Apple Inc. News Headlines Data\n\nNewsAPI url- &gt; https://newsapi.org/\nConstructed API for data retrieval-&gt; news_url = f”https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en”"
  },
  {
    "objectID": "presentation.html#apple-news-headlines---wordcloud",
    "href": "presentation.html#apple-news-headlines---wordcloud",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Apple News Headlines - WordCloud",
    "text": "Apple News Headlines - WordCloud"
  },
  {
    "objectID": "presentation.html#vadersentiment",
    "href": "presentation.html#vadersentiment",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "vaderSentiment",
    "text": "vaderSentiment\n\nVADER (Valence Aware Dictionary and sEntiment Reasoner)- is a rule-based sentiment analysis tool designed to assess the sentiment of text. It performs several operations to as piece of text:\n- Tokenization- breaks input into words.\n- Sentiment Intensity Scoring- sentiment intensity scores to individual words.\n- Punctuation Emphasis - effect of punctuation in modifying the intensity of sentiment (e.g., “AMAZING!!!” might have higher intensity than “amazing”).\n- Negation Handling - effect of negation words (like “not” or “don’t”) on reversing the polarity.\n- Emoticon and Capitalization Awareness - Recognizes and interprets emoticons.\n- Sentiment Score Calculation - Aggregates the individual word scores to generate an overall sentiment score for the entire text. The scores typically include positive, negative, neutral, and a compound score"
  },
  {
    "objectID": "presentation.html#apple-news-headlines---sentiment-analysis",
    "href": "presentation.html#apple-news-headlines---sentiment-analysis",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Apple News Headlines - Sentiment Analysis",
    "text": "Apple News Headlines - Sentiment Analysis"
  },
  {
    "objectID": "presentation.html#competitors-vs-apple",
    "href": "presentation.html#competitors-vs-apple",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Competitors vs Apple",
    "text": "Competitors vs Apple\n\nCorrelation = -0.15"
  },
  {
    "objectID": "presentation.html#external-factors-vs-apple",
    "href": "presentation.html#external-factors-vs-apple",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "External Factors vs Apple",
    "text": "External Factors vs Apple\n\nCorrelation = 0.45"
  },
  {
    "objectID": "presentation.html#conclusion",
    "href": "presentation.html#conclusion",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Conclusion",
    "text": "Conclusion\n\n- Acquired data from yfinance and headlines from NewsAPI\n- Explored intersection of finance and sentiment analysis focused on Apple stock using vaderSentiment in Python.\n- Plotted sentiment scores against Apple’s stock price, visually highlighting the potential correlations between sentiments shifts and market trends."
  },
  {
    "objectID": "presentation.html#challenges-faced",
    "href": "presentation.html#challenges-faced",
    "title": "Tech Or Treat: The Sentimental Stock Saga",
    "section": "Challenges faced",
    "text": "Challenges faced\n\n- Limitations of newsapi.org API to fetch real time news but this platform only lets us fetch data for the past 29 days which would stop us from training the model on a wider timescale.Another limitation of this API is that the API was limited to 100 pulls in 24 hours.\n- For the past few months, market sentiment has stayed overtly positive which doesn’t help us in training the model well to fit in the Bear Market Scenario.\n- Stock Market Analysis is a wide spectrum and all Investments should be done with caution. This is just a educational project to show the correlation between market sentiment and the stock price. Other factors such as Dollar Index, , external factors such as trading restrictions on products around the globe and the undergoing wars between different nations. DO NOT take the outcome of this project as financial advice. Please be careful before making any investments.\n- Thank you for joining me on this exploration of sentiments in the world of Apple stocks."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Tech or Treat: The Sentimental Stock Saga",
    "section": "",
    "text": "This project was developed by Feature Finders Club For INFO 523 - Data Mining and Discovery at the University of Arizona, taught by Dr. Greg Chism. The team is comprised of the following team members.\n\nTeam member 1: - Eshaan Mathakari: First-year graduate student pursuing Data Science at University of Arizona, github: @eshaanmathakari\nTeam member 2: Sanjay Bhargav Siddi: First-year graduate student pursuing Data Science at University of Arizona, github: @sanjaybhargavsiddi\nTeam member 3: Likith Kumar Dundigalla: First-year graduate student pursuing Data Science at University of Arizona, github: @LikithKumarDundigalla\nTeam member 4: Aravind shrenivas Murali: First-year graduate student pursuing Data Science at University of Arizona, github: @Aravind-shrenivas\nTeam member 5: Vamsi Vadala: First-year graduate student pursuing Data Science at University of Arizona, github: @Vamsi-Vadala"
  }
]