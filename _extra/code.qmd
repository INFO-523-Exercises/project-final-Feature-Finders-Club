
---
title: "Final-Project"
author: "Feature-Finders-Club"
format:
  html:
    embed-resources: true
execute:
  warning: false
  error: false
  
toc: true
---
```{r}
#| label: load-pkgs
#| message: false
suppressWarnings(library(tidyverse))
library(knitr)
library(lubridate)
library(reticulate)
```


## Dataset Setup
```{python setup, message=FALSE}
'''
## Remove the hash before running to install libraries
#!pip install yfinance
#!pip install vaderSentiment
#!pip install pandas 
#!pip install matplotlib
#!pip install nltk
'''
```
```{python importing-lib, message=FALSE}
from dateutil import parser
import requests
import pandas as pd
import matplotlib.pyplot as plt
!pip install yfinance
import yfinance as yf
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer
from datetime import datetime, timedelta
import plotly.graph_objects as go
from plotly.subplots import make_subplots
```


```{python data-fetch}
apple=yfinance.Ticker("AAPL")
data=apple.history(period='1mo')
```


```{python API-calling}
api_key='9dcab5d0d86940459623ec7dea5c8d36'
stock_symbol ="AAPL"
query_params = {
    'q': f'{stock_symbol}',
    'apiKey': api_key,
    'language': 'en',  # English language
    'country': 'us',   # USA sources
}
news_url = "https://newsapi.org/v2/everything"
response = requests.get(news_url, params=query_params)

end_date = datetime.now()
start_date = end_date - timedelta(days=31)

from_date = start_date.strftime("%Y-%m-%d")
to_date = end_date.strftime("%Y-%m-%d")

news_url = f"https://newsapi.org/v2/everything?q={stock_symbol}&apiKey={api_key}&from={from_date}&to={to_date}&language=en"

response = requests.get(news_url)

if response.status_code == 200:
    news_data = response.json()
    articles = news_data['articles']
    headlines = [(article['title'], article['publishedAt']) for article in articles]
else:
    print("Failed to retrieve news data.")
```


```{python headlines, message=FALSE}
apple_related_headlines=[]
for headline, _ in headlines:
    try:
        date = parser.parse(_)
        if 'Apple' in headline:
            apple_related_headlines.append((headline, date))
    except ValueError:
        pass
apple_related_headlines.sort(key=lambda x: x[1])
for data in apple_related_headlines:
    print(f'Headline: {data[0]}\nDate: {data[1]}\n')
df_apple_related_headlines = pd.DataFrame(apple_related_headlines, columns= ['Headlines', 'date'])
df_unique_apple_related_headlines = df_apple_related_headlines.drop_duplicates(subset=['Headlines'])
```

```{python sentimentAnalysis}
analyzer = SentimentIntensityAnalyzer()
sentiments = []
neg_scores = []
neu_scores = []
pos_scores = []
compound_scores = []
for sentence in df_unique_apple_related_headlines['Headlines']:
    vs = analyzer.polarity_scores(sentence)
    sentiments.append(sentence)
    neg_scores.append(vs['neg'])
    neu_scores.append(vs['neu'])
    pos_scores.append(vs['pos'])
    compound_scores.append(vs['compound'])
```

```{python sentimentScore}
sentiment_df = pd.DataFrame({
    'Headlines': sentiments,
    'Negative Score': neg_scores,
    'Neutral Score': neu_scores,
    'Positive Score': pos_scores,
    'Compound Score': compound_scores
})
```

```{python mergingDF}
merged_df= pd.merge(df_unique_apple_related_headlines, sentiment_df, how="inner", on=["Headlines"])
```

```{python mergingDF}
merged_df['date'] = merged_df['date'].astype(int)
```

```{python plot, fig.height=15, fig.width=25, echo=FALSE, message=FALSE}
# To fetch AAPL stock data for the last 30 days
ticker = 'AAPL'
start_date = (pd.to_datetime('today') - pd.DateOffset(days=30)).strftime('%Y-%m-%d')
end_date = pd.to_datetime('today').strftime('%Y-%m-%d')

stock_data = yf.download(ticker, start=start_date, end=end_date)

# Plotting the closing prices of AAPL stock using plotly
fig = make_subplots(rows=1, cols=2, subplot_titles=('AAPL Stock Price in the Last 30 Days', 'Sentiment Analysis of News Headlines'))

# Plot 1: AAPL Stock Price
fig.add_trace(go.Scatter(x=stock_data.index, y=stock_data['Close'], mode='lines', name='AAPL Close Price'), row=1, col=1)
fig.update_xaxes(title_text='Date', row=1, col=1)
fig.update_yaxes(title_text='Close Price', row=1, col=1)

# Plot 2: Sentiment Analysis
# Convert 'date' column to datetime if not already in datetime format
merged_df['date'] = pd.to_datetime(merged_df['date'])

fig.add_trace(go.Scatter(x=merged_df['date'], y=merged_df['Compound Score'], mode='lines', name='Sentiment Score', line=dict(color='orange')), row=1, col=2)
fig.update_xaxes(title_text='Date', row=1, col=2)
fig.update_yaxes(title_text='Sentiment Score', row=1, col=2)

# Update layout
fig.update_layout(title_text='Combined Plot', showlegend=False)

# Show the plot directly in the Jupyter Notebook or Lab environment
fig.show()

```

```{python}

```


## Plots
```{r}

```